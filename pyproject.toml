[project]
name = "tilebench"
description = "Inspect HEAD/LIST/GET requests withing Rasterio"
requires-python = ">=3.8"
license = {file = "LICENSE"}
authors = [
    {name = "Vincent Sarago", email = "vincent@developmentseed.com"},
]
classifiers = [
    "Intended Audience :: Information Technology",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: GIS",
]
dynamic = ["version", "readme"]
dependencies = [
    "fastapi>=0.100.0",
    "jinja2>=3.0,<4.0.0",
    "loguru",
    "rasterio>=1.3.8",
    "rio-tiler>=7.0,<8.0",
    "uvicorn[standard]",
]

[project.optional-dependencies]
test = [
    "pytest",
    "pytest-cov",
    "pytest-asyncio",
    "requests",
]
dev = [
    "pre-commit",
    "bump-my-version",
]

[project.urls]
Homepage = 'https://github.com/developmentseed/tilebench'
Issues = "https://github.com/developmentseed/tilebench/issues"
Source = "https://github.com/developmentseed/tilebench"

[project.scripts]
tilebench = "tilebench.scripts.cli:cli"

[tool.hatch.metadata.hooks.fancy-pypi-readme]
content-type = 'text/markdown'
# construct the PyPI readme from README.md and HISTORY.md
fragments = [
    {path = "README.md"},
    {text = "\n## Changelog\n\n"},
    {path = "CHANGES.md"},
]
# convert GitHUB issue/PR numbers and handles to links
substitutions = [
    {pattern = '(\s+)#(\d+)', replacement = '\1[#\2](https://github.com/developmentseed/tilebench/issues/\2)'},
    {pattern = '(\s+)@([\w\-]+)', replacement = '\1[@\2](https://github.com/\2)'},
    {pattern = '@@', replacement = '@'},
]

[tool.hatch.version]
path = "tilebench/__init__.py"

[tool.hatch.build.targets.sdist]
exclude = [
  "/tests",
  "Dockerfile",
  ".pytest_cache",
  ".history",
  ".github",
  ".bumpversion.cfg",
  ".flake8",
  ".gitignore",
  ".pre-commit-config.yaml",
]

[build-system]
requires = ["hatchling", "hatch-fancy-pypi-readme>=22.5.0"]
build-backend = "hatchling.build"

[tool.isort]
profile = "black"
known_first_party = ["tilebench"]
known_third_party = ["rasterio", "rio_tiler", "morecantile", "geojson_pydantic", "fastapi"]
default_section = "THIRDPARTY"

[tool.mypy]
no_strict_optional = true

[tool.ruff]
line-length = 90

[tool.ruff.lint]
select = [
    "D1",  # pydocstyle errors
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # flake8
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "B905",  # ignore zip() without an explicit strict= parameter, only support with python >3.10
]

[tool.ruff.lint.mccabe]
max-complexity = 14


[tool.bumpversion]
current_version = "0.14.0"
search = "{current_version}"
replace = "{new_version}"
regex = false
tag = true
commit = true
tag_name = "{new_version}"

[[tool.bumpversion.files]]
filename = "tilebench/__init__.py"
search = '__version__ = "{current_version}"'
replace = '__version__ = "{new_version}"'
